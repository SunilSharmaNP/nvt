from pyrogram import Client, filters
from pyrogram.types import CallbackQuery
from bot.database import db
from bot.helpers.buttons import *
from bot.utils.helpers import is_authorized_group, can_use_in_private
from config import Config

ABOUT_TEXT = f"""
ü§ñ **About Video Tools Bot**

**Version:** 2.0 (Fixed & Enhanced)
**Developer:** Professional Bot Development Team

**Features:**
‚úÖ Advanced Video Encoding
‚úÖ Video Merging (Video+Video, Video+Audio, Video+Subs)
‚úÖ Format Conversion
‚úÖ Watermark Addition
‚úÖ Video Trimming
‚úÖ Sample Generation
‚úÖ Detailed MediaInfo

**Technology:**
‚Ä¢ Built with Pyrogram & Python
‚Ä¢ FFmpeg for video processing
‚Ä¢ MongoDB for data management
‚Ä¢ Async processing

**Support:**
Owner ID: {Config.OWNER_ID}
"""

@Client.on_callback_query()
async def callback_handler(client: Client, query: CallbackQuery):
    """Handle all callback queries"""
    user_id = query.from_user.id
    data = query.data

    if await db.is_user_banned(user_id):
        await query.answer("‚ùå ‡§Ü‡§™ banned ‡§π‡•à‡§Ç‡•§", show_alert=True)
        return

    if query.message.chat.type != "private":
        if not await is_authorized_group(query.message.chat.id):
            await query.answer("‚ö†Ô∏è Unauthorized group!", show_alert=True)
            return

        if not await db.is_user_active(user_id, query.message.chat.id):
            await query.answer("‚ö†Ô∏è /start ‡§∏‡•á bot activate ‡§ï‡§∞‡•á‡§Ç!", show_alert=True)
            return
    else:
        if not await can_use_in_private(user_id):
            if data not in ["main_menu", "about", "help", "user_settings", "stop_bot"]:
                await query.answer(
                    f"‚ö†Ô∏è Bot authorized groups ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à!\\nOwner {Config.OWNER_ID} ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
                    show_alert=True
                )
                return

    if data == "main_menu":
        await query.message.edit_text(
            "üè† **Main Menu**\\n\\nOption ‡§ö‡•Å‡§®‡•á‡§Ç:",
            reply_markup=main_menu_buttons()
        )

    elif data == "about":
        await query.message.edit_text(ABOUT_TEXT, reply_markup=back_to_main())

    elif data == "help":
        help_text = """
üìö **‡§ï‡•à‡§∏‡•á ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç**

**Step 1: Settings Configure ‡§ï‡§∞‡•á‡§Ç** ‚öôÔ∏è
User Settings ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç ‡§î‡§∞ configure ‡§ï‡§∞‡•á‡§Ç

**Step 2: Tool Select ‡§ï‡§∞‡•á‡§Ç** üé¨
Video Tools menu ‡§∏‡•á tool ‡§ö‡•Å‡§®‡•á‡§Ç

**Step 3: Files ‡§≠‡•á‡§ú‡•á‡§Ç** üì§
Tool select ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ required files ‡§≠‡•á‡§ú‡•á‡§Ç

**Important:**
‚Ä¢ ‡§™‡§π‡§≤‡•á User Settings set ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§è‡§ï ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§è‡§ï task
‚Ä¢ Private chat limited (groups ‡§Æ‡•á‡§Ç use ‡§ï‡§∞‡•á‡§Ç)
"""
        await query.message.edit_text(help_text, reply_markup=back_to_main())

    elif data == "user_settings":
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS) if user else Config.DEFAULT_SETTINGS

        settings_text = f"""
‚öôÔ∏è **Your Current Settings**

üìÑ **Send as:** {settings.get('send_as', 'document').title()}
üñºÔ∏è **Thumbnail:** {'Set' if settings.get('thumbnail') else 'Not Set'}
üìù **Filename:** {settings.get('filename', 'default').title()}
üìã **Metadata:** {'Enabled' if settings.get('metadata') else 'Disabled'}
‚¨áÔ∏è **Download Mode:** {settings.get('download_mode', 'telegram').upper()}
‚¨ÜÔ∏è **Upload Mode:** {settings.get('upload_mode', 'telegram').title()}

‡§®‡•Ä‡§ö‡•á ‡§∏‡•á setting ‡§¨‡§¶‡§≤‡•á‡§Ç:
"""
        await query.message.edit_text(settings_text, reply_markup=user_settings_buttons())

    elif data == "video_tools":
        await query.message.edit_text(
            "üé¨ **Video Tools Menu**\\n\\nTool select ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=video_tools_buttons()
        )

    elif data == "stop_bot":
        await db.cancel_task(user_id)
        await db.clear_temp_files(user_id)

        if query.message.chat.type != "private":
            await db.set_user_active(user_id, query.message.chat.id, False)

        await query.message.edit_text(
            "üõë **Bot Stopped**\\n\\n"
            "‚úÖ Tasks cancelled\\n"
            "‚úÖ Files cleared\\n"
            "‚úÖ Hold mode set\\n\\n"
            "/start ‡§∏‡•á activate ‡§ï‡§∞‡•á‡§Ç‡•§"
        )

    elif data == "setting_send_as":
        user = await db.get_user(user_id)
        current = user.get("settings", {}).get("send_as", "document") if user else "document"
        await query.message.edit_text(
            "üìÑ **Send As**\\n\\nProcessed files ‡§ï‡•à‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç:",
            reply_markup=send_as_buttons(current)
        )

    elif data.startswith("sendas_"):
        option = data.split("_")[1]
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS.copy()) if user else Config.DEFAULT_SETTINGS.copy()
        settings["send_as"] = option
        await db.update_user_settings(user_id, settings)
        await query.answer(f"‚úÖ {option.title()} ‡§Æ‡•á‡§Ç set ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ")
        await query.message.edit_text(
            "üìÑ **Send As**\\n\\nProcessed files ‡§ï‡•à‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç:",
            reply_markup=send_as_buttons(option)
        )

    elif data == "setting_metadata":
        user = await db.get_user(user_id)
        current = user.get("settings", {}).get("metadata", False) if user else False
        await query.message.edit_text(
            "üìã **Metadata Settings**\\n\\nMetadata enable/disable ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=metadata_buttons(current)
        )

    elif data.startswith("metadata_"):
        option = data.split("_")[1] == "true"
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS.copy()) if user else Config.DEFAULT_SETTINGS.copy()
        settings["metadata"] = option
        await db.update_user_settings(user_id, settings)
        await query.answer(f"‚úÖ Metadata {'Enabled' if option else 'Disabled'}")
        await query.message.edit_text(
            "üìã **Metadata Settings**\\n\\nMetadata enable/disable ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=metadata_buttons(option)
        )

    elif data == "setting_download_mode":
        user = await db.get_user(user_id)
        current = user.get("settings", {}).get("download_mode", "telegram") if user else "telegram"
        await query.message.edit_text(
            "‚¨áÔ∏è **Download Mode**\\n\\nDownload source ‡§ö‡•Å‡§®‡•á‡§Ç:",
            reply_markup=download_mode_buttons(current)
        )

    elif data.startswith("dlmode_"):
        option = data.split("_")[1]
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS.copy()) if user else Config.DEFAULT_SETTINGS.copy()
        settings["download_mode"] = option
        await db.update_user_settings(user_id, settings)
        await query.answer(f"‚úÖ Download mode {option.upper()} set ‡§ï‡§ø‡§Ø‡§æ")
        await query.message.edit_text(
            "‚¨áÔ∏è **Download Mode**\\n\\nDownload source ‡§ö‡•Å‡§®‡•á‡§Ç:",
            reply_markup=download_mode_buttons(option)
        )

    elif data == "setting_upload_mode":
        user = await db.get_user(user_id)
        current = user.get("settings", {}).get("upload_mode", "telegram") if user else "telegram"
        await query.message.edit_text(
            "‚¨ÜÔ∏è **Upload Mode**\\n\\nUpload destination ‡§ö‡•Å‡§®‡•á‡§Ç:",
            reply_markup=upload_mode_buttons(current)
        )

    elif data.startswith("upmode_"):
        option = data.split("_")[1]
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS.copy()) if user else Config.DEFAULT_SETTINGS.copy()
        settings["upload_mode"] = option
        await db.update_user_settings(user_id, settings)
        await query.answer(f"‚úÖ Upload mode {option.title()} set ‡§ï‡§ø‡§Ø‡§æ")
        await query.message.edit_text(
            "‚¨ÜÔ∏è **Upload Mode**\\n\\nUpload destination ‡§ö‡•Å‡§®‡•á‡§Ç:",
            reply_markup=upload_mode_buttons(option)
        )

    elif data == "tool_merge":
        await db.set_video_tool(user_id, "merge")
        await query.message.edit_text(
            "üîó **Video Merge**\\n\\nMerge type select ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=merge_type_buttons()
        )

    elif data.startswith("merge_"):
        merge_type = data.replace("merge_", "")
        await db.set_video_tool(user_id, "merge")
        await db.set_merge_type(user_id, merge_type)

        if merge_type == "video_video":
            instruction = "üìπ 2 ‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï videos ‡§≠‡•á‡§ú‡•á‡§Ç merge ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§"
        elif merge_type == "video_audio":
            instruction = "üìπ ‡§™‡§π‡§≤‡•á 1 video file ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§´‡§ø‡§∞ 1 audio file‡•§"
        else:
            instruction = "üìπ ‡§™‡§π‡§≤‡•á 1 video file ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§´‡§ø‡§∞ 1 subtitle file (.srt, .ass, .vtt)‡•§"

        await query.message.edit_text(
            f"üîó **{merge_type.replace('_', ' + ').title()}**\\n\\n{instruction}",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ Merge mode selected! Files ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    elif data == "tool_encoding":
        await db.set_video_tool(user_id, "encoding")
        await query.message.edit_text(
            "üéûÔ∏è **Video Encoding**\\n\\nQuality preset select ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=encoding_quality_buttons()
        )

    elif data.startswith("quality_"):
        quality = data.replace("quality_", "")

        if quality == "custom":
            await query.message.edit_text(
                "‚öôÔ∏è **Custom Encoding Settings**\\n\\nCustom parameters configure ‡§ï‡§∞‡•á‡§Ç:",
                reply_markup=encoding_settings_buttons()
            )
            await db.set_encoding_settings(user_id, {"preset_name": "custom"})
        else:
            preset = Config.VIDEO_PRESETS.get(quality, Config.VIDEO_PRESETS["720p"])
            preset["preset_name"] = quality
            await db.set_encoding_settings(user_id, preset)

            await query.message.edit_text(
                f"‚úÖ **{quality.upper()} Selected**\\n\\n"
                "üìπ ‡§Ö‡§¨ video file ‡§≠‡•á‡§ú‡•á‡§Ç encoding ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
                reply_markup=encoding_settings_buttons()
            )
            await query.answer(f"‚úÖ {quality.upper()} preset selected!")

    elif data == "enc_done":
        user = await db.get_user(user_id)
        enc_settings = user.get("encoding_settings")

        if not enc_settings:
            await query.answer("‚ö†Ô∏è ‡§™‡§π‡§≤‡•á quality preset select ‡§ï‡§∞‡•á‡§Ç!", show_alert=True)
            return

        await query.message.edit_text(
            "‚úÖ **Encoding Settings Configured**\\n\\n"
            "üìπ ‡§Ö‡§¨ video file ‡§≠‡•á‡§ú‡•á‡§Ç encoding ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ Ready! Video file ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    elif data == "tool_convert":
        await db.set_video_tool(user_id, "convert")
        await query.message.edit_text(
            "üîÑ **Convert**\\n\\n"
            "üìπ Video ‡§≠‡•á‡§ú‡•á‡§Ç (document ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è) ‡§Ø‡§æ\\n"
            "üìÑ Document ‡§≠‡•á‡§ú‡•á‡§Ç (video ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ Convert mode selected! File ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    elif data == "tool_watermark":
        await db.set_video_tool(user_id, "watermark")
        await query.message.edit_text(
            "¬©Ô∏è **Add Watermark**\\n\\n"
            "Watermark position select ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=watermark_position_buttons()
        )

    elif data.startswith("wm_"):
        position = data.replace("wm_", "")
        await db.set_watermark_position(user_id, position)
        await query.message.edit_text(
            f"¬©Ô∏è **Watermark Position: {position.title()}**\\n\\n"
            "üìπ ‡§™‡§π‡§≤‡•á video file ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§´‡§ø‡§∞ watermark image ‡§≠‡•á‡§ú‡•á‡§Ç‡•§",
            reply_markup=back_to_video_tools()
        )
        await query.answer(f"‚úÖ Position {position} selected!")

    elif data == "tool_trim":
        await db.set_video_tool(user_id, "trim")
        await query.message.edit_text(
            "‚úÇÔ∏è **Trim Video**\\n\\n"
            "üìπ Video file ‡§≠‡•á‡§ú‡•á‡§Ç‡•§\\n"
            "‡§´‡§ø‡§∞ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§∏‡•á start time ‡§î‡§∞ duration ‡§™‡•Ç‡§õ‡•Ç‡§Ç‡§ó‡§æ‡•§",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ Trim mode selected! Video ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    elif data == "tool_sample":
        await db.set_video_tool(user_id, "sample")
        await query.message.edit_text(
            "üé¨ **Sample Video**\\n\\n"
            "üìπ Video file ‡§≠‡•á‡§ú‡•á‡§Ç 30-second sample generate ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ Sample mode selected! Video ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    elif data == "tool_mediainfo":
        await db.set_video_tool(user_id, "mediainfo")
        await query.message.edit_text(
            "üìä **MediaInfo**\\n\\n"
            "üìπ Video file ‡§≠‡•á‡§ú‡•á‡§Ç detailed information ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ MediaInfo mode selected! Video ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
    
