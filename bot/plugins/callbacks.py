from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, Message
from bot.database import db
from bot.helpers.buttons import *
from bot.utils.helpers import is_authorized_group, can_use_in_private
from config import Config

ABOUT_TEXT = f"""
ü§ñ **About Video Tools Bot**

**Version:** 3.0 (Professional Edition)
**Developer:** NVT Team

**Features:**
‚úÖ Advanced Video Encoding
‚úÖ Video Merging (Dual Audio Support)
‚úÖ Format Conversion
‚úÖ Text/Image Watermarking
‚úÖ Video Trimming
‚úÖ Sample Generation
‚úÖ Professional MediaInfo
‚úÖ URL Download Support
‚úÖ Persistent User Settings

**Technology:**
‚Ä¢ Pyrogram & Python
‚Ä¢ FFmpeg for processing
‚Ä¢ MongoDB for persistence
‚Ä¢ Telegraph for MediaInfo
‚Ä¢ Async/Await architecture

**Support:**
Owner ID: {Config.OWNER_ID}
"""

@Client.on_callback_query()
async def callback_handler(client: Client, query: CallbackQuery):
    """Handle all callback queries"""
    user_id = query.from_user.id
    data = query.data

    # Ban check
    if await db.is_user_banned(user_id):
        await query.answer("‚ùå ‡§Ü‡§™ banned ‡§π‡•à‡§Ç‡•§", show_alert=True)
        return

    # Authorization check for groups
    if query.message.chat.type != "private":
        if not await is_authorized_group(query.message.chat.id):
            await query.answer("‚ö†Ô∏è Unauthorized group!", show_alert=True)
            return

        if not await db.is_user_active(user_id, query.message.chat.id):
            await query.answer("‚ö†Ô∏è /start ‡§∏‡•á bot activate ‡§ï‡§∞‡•á‡§Ç!", show_alert=True)
            return
    else:
        # Private chat check
        if not await can_use_in_private(user_id):
            if data not in ["main_menu", "about", "help", "user_settings"]:
                await query.answer(
                    f"‚ö†Ô∏è Bot authorized groups ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à!\nOwner: {Config.OWNER_ID}",
                    show_alert=True
                )
                return

    # Main Menu
    if data == "main_menu":
        await query.message.edit_text(
            "üè† **Main Menu**\n\nOption ‡§ö‡•Å‡§®‡•á‡§Ç:",
            reply_markup=main_menu_buttons()
        )

    # About
    elif data == "about":
        await query.message.edit_text(ABOUT_TEXT, reply_markup=back_to_main())

    # Help
    elif data == "help":
        help_text = """
üìö **Quick Guide**

**Setup:**
1. User Settings ‡§∏‡•á preferences set ‡§ï‡§∞‡•á‡§Ç
2. Video Tools ‡§∏‡•á tool enable ‡§ï‡§∞‡•á‡§Ç
3. File ‡§≠‡•á‡§ú‡•á‡§Ç

**Important:**
‚Ä¢ ‡§∏‡§≠‡•Ä settings database ‡§Æ‡•á‡§Ç save ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç
‚Ä¢ ‡§è‡§ï tool enable ‡§ï‡§∞‡•á‡§Ç, ‡§´‡§ø‡§∞ files ‡§≠‡•á‡§ú‡•á‡§Ç
‚Ä¢ Download/Upload mode mismatch check ‡§π‡•ã‡§§‡§æ ‡§π‡•à

Use /help for complete guide.
"""
        await query.message.edit_text(help_text, reply_markup=back_to_main())

    # User Settings Menu
    elif data == "user_settings":
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS) if user else Config.DEFAULT_SETTINGS

        settings_text = f"""
‚öôÔ∏è **Your Current Settings**

üìÑ **Send as:** {settings.get('send_as', 'document').title()}
üñºÔ∏è **Thumbnail:** {'Set' if user.get('thumbnail_file_id') else 'Not Set'}
üìù **Filename:** {user.get('custom_filename') or 'Default'}
üìã **Metadata:** {'Enabled' if settings.get('metadata') else 'Disabled'}
‚¨áÔ∏è **Download Mode:** {settings.get('download_mode', 'telegram').upper()}
‚¨ÜÔ∏è **Upload Mode:** {settings.get('upload_mode', 'telegram').title()}

‡§®‡•Ä‡§ö‡•á ‡§∏‡•á setting ‡§¨‡§¶‡§≤‡•á‡§Ç:
"""
        await query.message.edit_text(settings_text, reply_markup=user_settings_buttons())

    # Video Tools Menu
    elif data == "video_tools":
        user = await db.get_user(user_id)
        active_tool = user.get("video_tool_selected") if user else None
        
        vt_text = "üé¨ **Video Tools Menu**\n\n"
        if active_tool:
            vt_text += f"‚úÖ **Active:** {active_tool.replace('_', ' ').title()}\n\n"
        else:
            vt_text += "‚ö†Ô∏è ‡§™‡§π‡§≤‡•á ‡§è‡§ï tool enable ‡§ï‡§∞‡•á‡§Ç!\n\n"
        
        vt_text += "Tool select ‡§ï‡§∞‡•á‡§Ç (‚úÖ = active):"
        
        await query.message.edit_text(vt_text, reply_markup=video_tools_buttons(active_tool))

    # ========== USER SETTINGS HANDLERS ==========
    
    # Send As Setting
    elif data == "setting_send_as":
        user = await db.get_user(user_id)
        current = user.get("settings", {}).get("send_as", "document") if user else "document"
        await query.message.edit_text(
            "üìÑ **Send As**\n\nProcessed files ‡§ï‡•à‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç:",
            reply_markup=send_as_buttons(current)
        )

    elif data.startswith("sendas_"):
        option = data.split("_")[1]
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS.copy()) if user else Config.DEFAULT_SETTINGS.copy()
        settings["send_as"] = option
        await db.update_user_settings(user_id, settings)
        await query.answer(f"‚úÖ {option.title()} ‡§Æ‡•á‡§Ç set ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ")
        await query.message.edit_text(
            "üìÑ **Send As**\n\nProcessed files ‡§ï‡•à‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç:",
            reply_markup=send_as_buttons(option)
        )

    # Thumbnail Setting
    elif data == "setting_thumbnail":
        await query.answer("‡§Ö‡§¨ ‡§è‡§ï photo ‡§≠‡•á‡§ú‡•á‡§Ç thumbnail ‡§ï‡•á ‡§≤‡§ø‡§è", show_alert=True)
        await query.message.reply_text(
            "üñºÔ∏è **Set Thumbnail**\n\n"
            "‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï photo ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡•ã thumbnail ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç use ‡§π‡•ã‡§ó‡•Ä‡•§\n"
            "Cancel ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /stop use ‡§ï‡§∞‡•á‡§Ç‡•§"
        )

    # Filename Setting  
    elif data == "setting_filename":
        await query.answer("‡§Ö‡§¨ custom filename text ‡§≠‡•á‡§ú‡•á‡§Ç", show_alert=True)
        await query.message.reply_text(
            "üìù **Set Custom Filename**\n\n"
            "‡§ï‡•É‡§™‡§Ø‡§æ output filename ‡§≠‡•á‡§ú‡•á‡§Ç (without extension)‡•§\n"
            "Example: `MyVideo`, `Encoded_720p`\n\n"
            "Cancel ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /stop use ‡§ï‡§∞‡•á‡§Ç‡•§"
        )

    # Metadata Setting
    elif data == "setting_metadata":
        user = await db.get_user(user_id)
        current = user.get("settings", {}).get("metadata", False) if user else False
        await query.message.edit_text(
            "üìã **Metadata Settings**\n\nMetadata enable/disable ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=metadata_buttons(current)
        )

    elif data.startswith("metadata_"):
        option = data.split("_")[1] == "true"
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS.copy()) if user else Config.DEFAULT_SETTINGS.copy()
        settings["metadata"] = option
        await db.update_user_settings(user_id, settings)
        await query.answer(f"‚úÖ Metadata {'Enabled' if option else 'Disabled'}")
        await query.message.edit_text(
            "üìã **Metadata Settings**\n\nMetadata enable/disable ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=metadata_buttons(option)
        )

    # Download Mode Setting
    elif data == "setting_download_mode":
        user = await db.get_user(user_id)
        current = user.get("settings", {}).get("download_mode", "telegram") if user else "telegram"
        await query.message.edit_text(
            "‚¨áÔ∏è **Download Mode**\n\n"
            "**Telegram:** Telegram ‡§∏‡•á files download\n"
            "**URL:** Direct URL ‡§∏‡•á download\n\n"
            "Select ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=download_mode_buttons(current)
        )

    elif data.startswith("dlmode_"):
        option = data.split("_")[1]
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS.copy()) if user else Config.DEFAULT_SETTINGS.copy()
        settings["download_mode"] = option
        await db.update_user_settings(user_id, settings)
        await query.answer(f"‚úÖ Download mode {option.upper()} set ‡§ï‡§ø‡§Ø‡§æ")
        await query.message.edit_text(
            "‚¨áÔ∏è **Download Mode**\n\nDownload source ‡§ö‡•Å‡§®‡•á‡§Ç:",
            reply_markup=download_mode_buttons(option)
        )

    # Upload Mode Setting
    elif data == "setting_upload_mode":
        user = await db.get_user(user_id)
        current = user.get("settings", {}).get("upload_mode", "telegram") if user else "telegram"
        await query.message.edit_text(
            "‚¨ÜÔ∏è **Upload Mode**\n\n"
            "**Telegram:** Direct upload to Telegram\n"
            "**GoFile:** Upload to GoFile server\n\n"
            "Select ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=upload_mode_buttons(current)
        )

    elif data.startswith("upmode_"):
        option = data.split("_")[1]
        user = await db.get_user(user_id)
        settings = user.get("settings", Config.DEFAULT_SETTINGS.copy()) if user else Config.DEFAULT_SETTINGS.copy()
        settings["upload_mode"] = option
        await db.update_user_settings(user_id, settings)
        await query.answer(f"‚úÖ Upload mode {option.title()} set ‡§ï‡§ø‡§Ø‡§æ")
        await query.message.edit_text(
            "‚¨ÜÔ∏è **Upload Mode**\n\nUpload destination ‡§ö‡•Å‡§®‡•á‡§Ç:",
            reply_markup=upload_mode_buttons(option)
        )

    # ========== VIDEO TOOLS HANDLERS ==========

    # Merge Tool
    elif data == "tool_merge":
        await db.set_video_tool(user_id, "merge")
        user = await db.get_user(user_id)
        current_type = user.get("merge_type")
        
        await query.message.edit_text(
            "üîó **Video Merge Tool**\n\n"
            "Merge type select ‡§ï‡§∞‡•á‡§Ç (‚úÖ = active):",
            reply_markup=merge_type_buttons(current_type)
        )
        await query.answer("‚úÖ Merge tool enabled!")

    elif data.startswith("merge_"):
        merge_type = data.replace("merge_", "")
        await db.set_video_tool(user_id, "merge")
        await db.set_merge_type(user_id, merge_type)

        if merge_type == "video_video":
            instruction = "üìπ 2 ‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï videos ‡§≠‡•á‡§ú‡•á‡§Ç merge ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§"
        elif merge_type == "video_audio":
            instruction = "üìπ ‡§™‡§π‡§≤‡•á 1 video file ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§´‡§ø‡§∞ 1 audio file (dual audio support)‡•§"
        else:
            instruction = "üìπ ‡§™‡§π‡§≤‡•á 1 video file ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§´‡§ø‡§∞ 1 subtitle file (.srt, .ass, .vtt)‡•§"

        await query.message.edit_text(
            f"üîó **{merge_type.replace('_', ' + ').title()}**\n\n{instruction}",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ Merge type selected!")

    # Encoding Tool
    elif data == "tool_encoding":
        await db.set_video_tool(user_id, "encoding")
        user = await db.get_user(user_id)
        current_preset = user.get("encoding_settings", {}).get("preset_name") if user else None
        
        await query.message.edit_text(
            "üéûÔ∏è **Video Encoding Tool**\n\n"
            "Quality preset select ‡§ï‡§∞‡•á‡§Ç (‚úÖ = active):",
            reply_markup=encoding_quality_buttons(current_preset)
        )
        await query.answer("‚úÖ Encoding tool enabled!")

    elif data.startswith("quality_"):
        quality = data.replace("quality_", "")
        await db.set_video_tool(user_id, "encoding")

        if quality == "custom":
            await query.message.edit_text(
                "‚öôÔ∏è **Custom Encoding**\n\n"
                "Default presets ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡•á‡§Ç‡•§\n"
                "‡§Ö‡§¨ video ‡§≠‡•á‡§ú‡•á‡§Ç:",
                reply_markup=encoding_settings_buttons()
            )
            await db.set_encoding_settings(user_id, {"preset_name": "custom"})
        else:
            preset = Config.VIDEO_PRESETS.get(quality, Config.VIDEO_PRESETS["720p"])
            preset["preset_name"] = quality
            await db.set_encoding_settings(user_id, preset)

            await query.message.edit_text(
                f"‚úÖ **{quality.upper()} Selected**\n\n"
                "üìπ ‡§Ö‡§¨ video file ‡§≠‡•á‡§ú‡•á‡§Ç encoding ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
                reply_markup=back_to_video_tools()
            )
        await query.answer(f"‚úÖ {quality.upper()} preset selected!")

    elif data == "enc_done":
        await query.message.edit_text(
            "‚úÖ **Settings Configured**\n\n"
            "üìπ ‡§Ö‡§¨ video file ‡§≠‡•á‡§ú‡•á‡§Ç‡•§",
            reply_markup=back_to_video_tools()
        )

    # Convert Tool
    elif data == "tool_convert":
        await db.set_video_tool(user_id, "convert")
        user = await db.get_user(user_id)
        current_mode = user.get("convert_mode", "to_document")
        
        await query.message.edit_text(
            "üîÑ **Convert Tool**\n\n"
            "Convert mode select ‡§ï‡§∞‡•á‡§Ç (‚úÖ = active):",
            reply_markup=convert_mode_buttons(current_mode)
        )
        await query.answer("‚úÖ Convert tool enabled!")

    elif data.startswith("convert_"):
        mode = data.replace("convert_", "")
        await db.set_convert_mode(user_id, mode)
        
        if mode == "to_document":
            instruction = "üìÑ Video file ‡§≠‡•á‡§ú‡•á‡§Ç document ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§"
        else:
            instruction = "üé• Document file ‡§≠‡•á‡§ú‡•á‡§Ç video ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§"
        
        await query.message.edit_text(
            f"üîÑ **Convert: {mode.replace('_', ' ').title()}**\n\n{instruction}",
            reply_markup=back_to_video_tools()
        )
        await query.answer(f"‚úÖ Convert mode: {mode}")

    # Watermark Tool
    elif data == "tool_watermark":
        await db.set_video_tool(user_id, "watermark")
        user = await db.get_user(user_id)
        current_type = user.get("watermark_type")
        
        await query.message.edit_text(
            "¬©Ô∏è **Watermark Tool**\n\n"
            "Watermark type select ‡§ï‡§∞‡•á‡§Ç (‚úÖ = active):",
            reply_markup=watermark_type_buttons(current_type)
        )
        await query.answer("‚úÖ Watermark tool enabled!")

    elif data == "wm_type_text":
        await db.set_watermark_type(user_id, "text")
        await query.answer("‡§Ö‡§¨ watermark text ‡§≠‡•á‡§ú‡•á‡§Ç", show_alert=True)
        await query.message.reply_text(
            "üìù **Text Watermark**\n\n"
            "‡§ï‡•É‡§™‡§Ø‡§æ watermark text ‡§≠‡•á‡§ú‡•á‡§Ç‡•§\n"
            "Example: `¬© MyChannel` ‡§Ø‡§æ `@YourUsername`"
        )

    elif data == "wm_type_image":
        await db.set_watermark_type(user_id, "image")
        await query.answer("‡§Ö‡§¨ PNG image ‡§≠‡•á‡§ú‡•á‡§Ç", show_alert=True)
        await query.message.reply_text(
            "üñºÔ∏è **Image Watermark**\n\n"
            "‡§ï‡•É‡§™‡§Ø‡§æ PNG image ‡§≠‡•á‡§ú‡•á‡§Ç (transparent background recommended)‡•§"
        )

    elif data == "wm_position_menu":
        user = await db.get_user(user_id)
        current_pos = user.get("watermark_position", "topright")
        await query.message.edit_text(
            "üìç **Watermark Position**\n\nPosition select ‡§ï‡§∞‡•á‡§Ç:",
            reply_markup=watermark_position_buttons(current_pos)
        )

    elif data.startswith("wm_pos_"):
        position = data.replace("wm_pos_", "")
        await db.set_watermark_position(user_id, position)
        await query.answer(f"‚úÖ Position: {position}")
        await query.message.edit_text(
            f"‚úÖ **Position Set: {position.title()}**\n\n"
            "‡§Ö‡§¨ video ‡§≠‡•á‡§ú‡•á‡§Ç watermark add ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
            reply_markup=back_to_video_tools()
        )

    # Trim Tool
    elif data == "tool_trim":
        await db.set_video_tool(user_id, "trim")
        await query.message.edit_text(
            "‚úÇÔ∏è **Trim Video Tool**\n\n"
            "üìπ Video file ‡§≠‡•á‡§ú‡•á‡§Ç‡•§\n"
            "‡§´‡§ø‡§∞ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§∏‡•á trim details ‡§™‡•Ç‡§õ‡•Ç‡§Ç‡§ó‡§æ‡•§\n\n"
            "**Format Example:**\n"
            "`00:00:10-00:00:30` (10 sec to 30 sec)",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ Trim tool enabled! Video ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    # Sample Tool
    elif data == "tool_sample":
        await db.set_video_tool(user_id, "sample")
        user = await db.get_user(user_id)
        current_duration = user.get("sample_duration", 30)
        
        await query.message.edit_text(
            "üé¨ **Sample Video Tool**\n\n"
            "Sample duration select ‡§ï‡§∞‡•á‡§Ç (‚úÖ = active):",
            reply_markup=sample_duration_buttons(current_duration)
        )
        await query.answer("‚úÖ Sample tool enabled!")

    elif data.startswith("sample_"):
        duration = int(data.replace("sample_", ""))
        await db.set_sample_duration(user_id, duration)
        await query.message.edit_text(
            f"‚úÖ **{duration}s Sample Selected**\n\n"
            "üìπ ‡§Ö‡§¨ video file ‡§≠‡•á‡§ú‡•á‡§Ç {duration}-second sample generate ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
            reply_markup=back_to_video_tools()
        )
        await query.answer(f"‚úÖ {duration}s sample selected!")

    # MediaInfo Tool
    elif data == "tool_mediainfo":
        await db.set_video_tool(user_id, "mediainfo")
        await query.message.edit_text(
            "üìä **MediaInfo Tool**\n\n"
            "üìπ Video file ‡§≠‡•á‡§ú‡•á‡§Ç professional MediaInfo ‡§ï‡•á ‡§≤‡§ø‡§è‡•§\n"
            "Graph ‡§ï‡•á ‡§∏‡§æ‡§• detailed analysis milega‡•§",
            reply_markup=back_to_video_tools()
        )
        await query.answer("‚úÖ MediaInfo tool enabled! Video ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    # Cancel Operation
    elif data == "cancel_operation":
        await db.clear_temp_files(user_id)
        await query.message.edit_text(
            "‚ùå **Operation Cancelled**\n\n"
            "Temporary data cleared‡•§",
            reply_markup=main_menu_buttons()
        )
        await query.answer("Cancelled")
